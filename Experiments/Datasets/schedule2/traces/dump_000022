        -:    0:Source:schedule2.c
        -:    0:Graph:schedule2.gcno
        -:    0:Data:schedule2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* $Log: schedule.c,v $
        -:    3: * Revision 1.4  1993/05/04  12:23:58  foster
        -:    4: * Debug stuff removed
        -:    5: *
        -:    6: * Revision 1.3  1993/05/03  20:27:04  foster
        -:    7: * Full Functionality
        -:    8: *
        -:    9: * Revision 1.2  1993/05/03  15:41:01  foster
        -:   10: * Restructure functions
        -:   11: *
        -:   12: * Revision 1.1  1993/05/01  11:38:04  foster
        -:   13: * Initial revision
        -:   14: * */
        -:   15:
        -:   16:#include <stdio.h>
        -:   17:#include "schedule2.h"
        -:   18:
        -:   19:static struct process * current_job;
        -:   20:static int next_pid = 0;
        -:   21:
        -:   22:int
       28:   23:enqueue(prio, new_process)
        -:   24:     int prio;
        -:   25:     struct process *new_process;
        -:   26:{
        -:   27:    int status;
       28:   28:    if(status = put_end(prio, new_process)) return(status); /* Error */
       28:   29:    return(reschedule(prio));
       28:   30:}
        -:   31:
        -:   32:struct queue
        -:   33:{
        -:   34:    int length;
        -:   35:    struct process *head;
        -:   36:};
        -:   37:
        -:   38:static struct queue prio_queue[MAXPRIO + 1]; /* blocked queue is [0] */
        -:   39:
        -:   40:
        -:   41:
        1:   42:main(argc, argv) /* n3, n2, n1 : # of processes at prio3 ... */
        -:   43:int argc;
        -:   44:char *argv[];
        -:   45:{
        -:   46:    int command, prio;
        -:   47:    float ratio;
        -:   48:    int nprocs, status, pid;
        -:   49:    struct process *process;
        1:   50:    if(argc != MAXPRIO + 1) exit_here(BADNOARGS);
        4:   51:    for(prio = MAXPRIO; prio > 0; prio--)
        -:   52:    {
        3:   53:	if((nprocs = atoi(argv[MAXPRIO + 1 - prio])) < 0) exit_here(BADARG);
       23:   54:	for(; nprocs > 0; nprocs--)
        -:   55:	{
       20:   56:	    if(status = new_job(prio)) exit_here(status);
       20:   57:	}
        3:   58:    }
        -:   59:    /* while there are commands, schedule it */
       15:   60:    while((status = get_command(&command, &prio, &ratio)) > 0)
        -:   61:    {
       14:   62:	schedule(command, prio, ratio);
        -:   63:    }
        1:   64:    if(status < 0) exit_here(status); /* Real bad error */
        1:   65:    exit_here(OK);
        1:   66:}
        -:   67:
        -:   68:int 
       15:   69:get_command(command, prio, ratio)
        -:   70:    int *command, *prio;
        -:   71:    float *ratio;
        -:   72:{
       15:   73:    int status = OK;
        -:   74:    char buf[CMDSIZE];
       15:   75:    if(fgets(buf, CMDSIZE, stdin))
        -:   76:    {
       14:   77:	*prio = *command = -1; *ratio =-1.0;
       14:   78:	sscanf(buf, "%d", command);
       14:   79:	switch(*command)
        -:   80:	{
        -:   81:	  case NEW_JOB :
        1:   82:	    sscanf(buf, "%*s%d", prio);
        1:   83:	    break;
        -:   84:	  case UNBLOCK :
        3:   85:	    sscanf(buf, "%*s%f", ratio);
        3:   86:	    break;
        -:   87:	  case UPGRADE_PRIO :
    #####:   88:	    sscanf(buf, "%*s%d%f", prio, ratio);
    #####:   89:	    break;
        -:   90:	}
        -:   91:	 /* Find end of  line of input if no EOF */
       14:   92:	while(buf[strlen(buf)-1] != '\n' && fgets(buf, CMDSIZE, stdin));
       14:   93:	return(TRUE);
        -:   94:    }
        1:   95:    else return(FALSE);
       15:   96:}
        -:   97:
        1:   98:exit_here(status)
        -:   99:     int status;
        -:  100:{
        1:  101:    exit(abs(status));
        -:  102:}
        -:  103:
        -:  104:
        -:  105:int 
       21:  106:new_job(prio) /* allocate new pid and process block. Stick at end */
        -:  107:     int prio;
        -:  108:{
       21:  109:    int pid, status = OK;
        -:  110:    struct process *new_process;
       21:  111:    pid = next_pid++;
       21:  112:    new_process = (struct process *) malloc(sizeof(struct process));
       21:  113:    if(!new_process) status = MALLOC_ERR;
        -:  114:    else
        -:  115:    {
       21:  116:	new_process->pid = pid;
       21:  117:	new_process->priority = prio;
       21:  118:	new_process->next = (struct process *) 0;
       21:  119:	status = enqueue(prio, new_process);
       21:  120:	if(status)
        -:  121:	{
    #####:  122:	    free(new_process); /* Return process block */
    #####:  123:	}
        -:  124:    }
       21:  125:    if(status) next_pid--; /* Unsuccess. Restore pid */
       21:  126:    return(status);
        -:  127:}
        -:  128:
    #####:  129:int upgrade_prio(prio, ratio) /* increment priority at ratio in queue */
        -:  130:     int prio;
        -:  131:     float ratio;
        -:  132:{
        -:  133:    int status;
        -:  134:    struct process * job;
    #####:  135:    if(prio < 1 || prio > MAXLOPRIO) return(BADPRIO);
    #####:  136:    if((status = get_process(prio, ratio, &job)) <= 0) return(status);
        -:  137:    /* We found a job in that queue. Upgrade it */
    #####:  138:    job->priority = prio + 1;
    #####:  139:    return(enqueue(prio + 1, job));
    #####:  140:}
        -:  141:
        -:  142:int
        3:  143:block() /* Put current job in blocked queue */
        -:  144:{
        -:  145:    struct process * job;
        3:  146:    job = get_current();
        3:  147:    if(job)
        -:  148:    {
        3:  149:	current_job = (struct process *)0; /* remove it */
        3:  150:	return(enqueue(BLOCKPRIO, job)); /* put into blocked queue */
        -:  151:    }
    #####:  152:    return(OK);
        3:  153:}
        -:  154:
        -:  155:int
        3:  156:unblock(ratio) /* Restore job @ ratio in blocked queue to its queue */
        -:  157:     float ratio;
        -:  158:{
        -:  159:    int status;
        -:  160:    struct process * job;
        3:  161:    if((status = get_process(BLOCKPRIO, ratio, &job)) <= 0) return(status);
        -:  162:    /* We found a blocked process. Put it where it belongs. */
        3:  163:    return(enqueue(job->priority, job));
        3:  164:}
        -:  165:
        -:  166:int
        1:  167:quantum_expire() /* put current job at end of its queue */
        -:  168:{
        -:  169:    struct process * job;
        1:  170:    job = get_current();
        1:  171:    if(job)
        -:  172:    {
        1:  173:	current_job = (struct process *)0; /* remove it */
        1:  174:	return(enqueue(job->priority, job));
        -:  175:    }
    #####:  176:    return(OK);
        1:  177:}
        -:  178:
        -:  179:int
        3:  180:finish() /* Get current job, print it, and zap it. */
        -:  181:{
        -:  182:    struct process * job;
        3:  183:    job = get_current();
        3:  184:    if(job)
        -:  185:    {
        3:  186:	current_job = (struct process *)0;
        3:  187:	reschedule(0);
        3:  188:	fprintf(stdout, " %d", job->pid);
        3:  189:	free(job);
        3:  190:	return(FALSE);
        -:  191:    }
    #####:  192:    else return(TRUE);
        3:  193:}
        -:  194:
        -:  195:int
    #####:  196:flush() /* Get all jobs in priority queues & zap them */
        -:  197:{
    #####:  198:    while(!finish());
    #####:  199:    fprintf(stdout, "\n");
    #####:  200:    return(OK);
        -:  201:}
        -:  202:
        -:  203:struct process * 
       38:  204:get_current() /* If no current process, get it. Return it */
        -:  205:{
        -:  206:    int prio;
       38:  207:    if(!current_job)
        -:  208:    {
        8:  209:	for(prio = MAXPRIO; prio > 0; prio--)
        -:  210:	{ /* find head of highest queue with a process */
        8:  211:	    if(get_process(prio, 0.0, &current_job) > 0) break;
    #####:  212:	}
        8:  213:    }
       38:  214:    return(current_job);
        -:  215:}
        -:  216:
        -:  217:int
       31:  218:reschedule(prio) /* Put highest priority job into current_job */
        -:  219:     int prio;
        -:  220:{
       31:  221:    if(current_job && prio > current_job->priority)
        -:  222:    {
    #####:  223:	put_end(current_job->priority, current_job);
    #####:  224:	current_job = (struct process *)0;
    #####:  225:    }
       31:  226:    get_current(); /* Reschedule */
       31:  227:    return(OK);
        -:  228:}
        -:  229:
        -:  230:int 
       14:  231:schedule(command, prio, ratio)
        -:  232:    int command, prio;
        -:  233:    float ratio;
        -:  234:{
       14:  235:    int status = OK;
       14:  236:    switch(command)
        -:  237:    {
        -:  238:      case NEW_JOB :
        1:  239:        status = new_job(prio);
        1:  240:	break;
        -:  241:      case QUANTUM_EXPIRE :
        1:  242:        status = quantum_expire();
        1:  243:	break;
        -:  244:      case UPGRADE_PRIO :
    #####:  245:        status = upgrade_prio(prio, ratio);
    #####:  246:	break;
        -:  247:      case BLOCK :
        3:  248:        status = block();
        3:  249:	break;
        -:  250:      case UNBLOCK :
        3:  251:        status = unblock(ratio);
        3:  252:	break;
        -:  253:      case FINISH :
        3:  254:        finish();
        3:  255:	fprintf(stdout, "\n");
        3:  256:	break;
        -:  257:      case FLUSH :
    #####:  258:        status = flush();
    #####:  259:	break;
        -:  260:      default:
        3:  261:	status = NO_COMMAND;
        3:  262:    }
       14:  263:    return(status);
        -:  264:}
        -:  265:
        -:  266:
        -:  267:
        -:  268:
        -:  269:int 
       28:  270:put_end(prio, process) /* Put process at end of queue */
        -:  271:     int prio;
        -:  272:     struct process *process;
        -:  273:{
        -:  274:    struct process **next;
       28:  275:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
        -:  276:     /* find end of queue */
      103:  277:    for(next = &prio_queue[prio].head; *next; next = &(*next)->next);
       28:  278:    *next = process;
       28:  279:    prio_queue[prio].length++;
       28:  280:    return(OK);
       28:  281:}
        -:  282:
        -:  283:int 
       11:  284:get_process(prio, ratio, job)
        -:  285:     int prio;
        -:  286:     float ratio;
        -:  287:     struct process ** job;
        -:  288:{
        -:  289:    int length, index;
        -:  290:    struct process **next;
       11:  291:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
       11:  292:    if(ratio < 0.0 || ratio > 1.0) return(BADRATIO); /* Somebody else goofed */
       11:  293:    length = prio_queue[prio].length;
       11:  294:    index = ratio * length;
       11:  295:    index = index >= length ? length -1 : index; /* If ratio == 1.0 */
       11:  296:    for(next = &prio_queue[prio].head; index && *next; index--)
    #####:  297:        next = &(*next)->next; /* Count up to it */
       11:  298:    *job = *next;
       11:  299:    if(*job)
        -:  300:    {
       11:  301:	*next = (*next)->next; /* Mend the chain */
       11:  302:	(*job)->next = (struct process *) 0; /* break this link */
       11:  303:	prio_queue[prio].length--;
       11:  304:	return(TRUE);
        -:  305:    }
    #####:  306:    else return(FALSE);
       11:  307:}
