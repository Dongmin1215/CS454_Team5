        -:    0:Source:print_tokens2.c
        -:    0:Graph:print_tokens2.gcno
        -:    0:Data:print_tokens2.gcda
        -:    0:Runs:240
        -:    0:Programs:1
        -:    1:/***********************************************/
        -:    2:/*  assgnment.5  Shu Z. A00042813 for CS453    */
        -:    3:/*  using the tokenizer and stream module      */
        -:    4:/*  print_tokens.c Code                        */
        -:    5:/***********************************************/
        -:    6:
        -:    7:/***********************************************/
        -:    8:/* NAME:	print_tokens                   */
        -:    9:/* INPUT:	a filename                     */
        -:   10:/* OUTPUT:      print out the token stream     */
        -:   11:/* DESCRIPTION: using the tokenizer interface  */
        -:   12:/*              to print out the token stream  */
        -:   13:/***********************************************/
        -:   14:#include <stdio.h>
        -:   15:#include <ctype.h>
        -:   16:#include <string.h>
        -:   17:#include "tokens.h"
        -:   18:#define TRUE 1
        -:   19:#define FALSE 0
        -:   20:
      240:   21:main(argc,argv)
        -:   22:int argc;
        -:   23:char *argv[3];
        -:   24:{  char *fname;
        -:   25:   token tok;
        -:   26:   token_stream tp;
      240:   27:     if(argc==1)                  /* if not given filename,take as '""' */
        -:   28:       {
      168:   29:        fname= (char *) malloc(sizeof(char));
      168:   30:        *fname = '\0';
      168:   31:       }
       72:   32:     else if(argc==2)
       72:   33:        fname= argv[1];
        -:   34:     else
    #####:   35:       { fprintf(stdout, "Error!,please give the token stream\n");
    #####:   36:         exit(0);
        -:   37:       }
      240:   38:    tp=open_token_stream(fname);  /* open token stream */
      240:   39:    tok=get_token(tp);
     1967:   40:    while (is_eof_token(tok) ==FALSE) /* take one token each time until eof */
        -:   41:    {
     1727:   42:       print_token(tok);
     1727:   43:       tok=get_token(tp);
        -:   44:    }
      240:   45:    print_token(tok); /* print eof signal */
      240:   46:    exit(0);
        -:   47:}
        -:   48:
        -:   49:/* stream.c code */
        -:   50:
        -:   51:/***********************************************/
        -:   52:/* NMAE:	open_character_stream          */
        -:   53:/* INPUT:       a filename                     */
        -:   54:/* OUTPUT:      a pointer to chacracter_stream */
        -:   55:/* DESCRIPTION: when not given a filename,     */
        -:   56:/*              open stdin,otherwise open      */
        -:   57:/*              the existed file               */
        -:   58:/***********************************************/
      240:   59:character_stream open_character_stream(fname)
        -:   60:char *fname;
        -:   61:{ character_stream fp;
      240:   62:  if(fname == NULL)
      168:   63:     fp=stdin;
       72:   64:  else if ((fp=fopen(fname,"r"))== NULL)
        -:   65:  {
    #####:   66:       fprintf(stdout, "The file %s doesn't exists\n",fname);
    #####:   67:       exit(0);
        -:   68:  }
      240:   69:  return(fp);
        -:   70:}
        -:   71:
        -:   72:/**********************************************/
        -:   73:/* NAME:	get_char                      */
        -:   74:/* INPUT:       a pointer to char_stream      */
        -:   75:/* OUTPUT:      a character                   */
        -:   76:/**********************************************/
    13034:   77:char get_char(fp)
        -:   78:character_stream fp;
        -:   79:{ char ch;
    13034:   80:  ch=getc(fp);
    13034:   81:  return(ch);
        -:   82:}
        -:   83:
        -:   84:/***************************************************/
        -:   85:/* NAME:      unget_char                           */
        -:   86:/* INPUT:     a pointer to char_stream,a character */
        -:   87:/* OUTPUT:    a character                          */
        -:   88:/* DESCRIPTION:when unable to put back,return EOF  */
        -:   89:/***************************************************/
      354:   90:char unget_char(ch,fp)
        -:   91:character_stream fp;
        -:   92:char ch;
        -:   93:{ char c;
      354:   94:  c=ungetc(ch,fp);
      354:   95:  if(c ==EOF)
        -:   96:    {
       43:   97:     return(c);
        -:   98:    }
        -:   99:  else
      311:  100:     return(c);
      354:  101:}
        -:  102:
        -:  103:/* tokenizer.c code */
        -:  104:
        -:  105:
        -:  106:char buffer[81];  /* fixed array length MONI */ /* to store the token temporar */
        -:  107:
        -:  108:
        -:  109:static int is_spec_symbol();
        -:  110:static int is_token_end();
        -:  111:static unget_error();
        -:  112:static int is_keyword();
        -:  113:static int is_identifier();
        -:  114:static int is_num_constant();
        -:  115:static int is_char_constant();
        -:  116:static int is_str_constant();
        -:  117:static int is_comment();
        -:  118:static void print_spec_symbol();
        -:  119:
        -:  120:/********************************************************/
        -:  121:/* NAME:	open_token_stream                       */
        -:  122:/* INPUT:       a filename                              */
        -:  123:/* OUTPUT:      a pointer to a token_stream             */
        -:  124:/* DESCRIPTION: when filename is EMPTY,choice standard  */
        -:  125:/*              input device as input source            */
        -:  126:/********************************************************/
      240:  127:token_stream open_token_stream(fname)
        -:  128:char *fname;
        -:  129:{
        -:  130: token_stream fp;
      240:  131: if(strcmp(fname,"")==0)
      168:  132:    fp=open_character_stream(NULL);
        -:  133: else
       72:  134:    fp=open_character_stream(fname);
      240:  135: return(fp);
        -:  136:}
        -:  137:
        -:  138:/********************************************************/
        -:  139:/* NAME :	get_token                               */
        -:  140:/* INPUT: 	a pointer to the tokens_stream          */
        -:  141:/* OUTPUT:      a token                                 */
        -:  142:/* DESCRIPTION: according the syntax of tokens,dealing  */
        -:  143:/*              with different case  and get one token  */
        -:  144:/********************************************************/
     1967:  145:token get_token(tp)
        -:  146:token_stream tp;
        -:  147:{ 
     1967:  148:  int i=0,j;
     1967:  149:  int id=0;
        -:  150:  char ch,ch1[2];
   161294:  151:  for (j=0;j<=80;j++)          /* initial the buffer   */
   159327:  152:      { buffer[j]='\0';} 
     1967:  153:   ch1[0]='\0';
     1967:  154:   ch1[1]='\0';
     1967:  155:   ch=get_char(tp);
     3498:  156:   while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
        -:  157:      {
     1531:  158:       ch=get_char(tp);
        -:  159:      } 
     1967:  160:   buffer[i]=ch;
     1967:  161:   if(is_eof_token(buffer)==TRUE)return(buffer);
     1727:  162:   if(is_spec_symbol(buffer)==TRUE)return(buffer); 
     1243:  163:   if(ch =='"')id=1;    /* prepare for string */
     1243:  164:   if(ch ==59)id=2;    /* prepare for comment */
     1243:  165:   ch=get_char(tp);
        -:  166:
     9536:  167:   while (is_token_end(id,ch) == FALSE)/* until meet the end character */
        -:  168:   {
     8293:  169:       i++;
     8293:  170:       buffer[i]=ch;
     8293:  171:       ch=get_char(tp);
        -:  172:   }
     1243:  173:   ch1[0]=ch;                        /* hold the end charcater          */
     1243:  174:   if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
       43:  175:      { ch=unget_char(ch,tp);        /* then put back eof on token_stream */
       43:  176:        if(ch==EOF)unget_error(tp);
       43:  177:        return(buffer);
        -:  178:      }
     1200:  179:   if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
      289:  180:      { ch=unget_char(ch,tp);        /* then put back this character       */
      289:  181:        if(ch==EOF)unget_error(tp);
      289:  182:        return(buffer);
        -:  183:      }
      911:  184:   if(id==1)                  /* if end character is " and is string */
      147:  185:     { i++;                     /* case,hold the second " in buffer    */
      147:  186:       buffer[i]=ch;
      147:  187:       return(buffer); 
        -:  188:     }
      764:  189:   if(id==0 && ch==59)
        -:  190:                                   /* when not in string or comment,meet ";" */
       22:  191:     { ch=unget_char(ch,tp);       /* then put back this character         */
       22:  192:       if(ch==EOF)unget_error(tp);
       22:  193:       return(buffer); 
        -:  194:     }
      742:  195:  return(buffer);                   /* return nomal case token             */
     1967:  196:}
        -:  197:
        -:  198:/*******************************************************/
        -:  199:/* NAME:	is_token_end                           */
        -:  200:/* INPUT:       a character,a token status             */
        -:  201:/* OUTPUT:	a BOOLEAN value                        */
        -:  202:/*******************************************************/
     9536:  203:static int is_token_end(str_com_id,ch)
        -:  204:char ch;
        -:  205:int str_com_id;
        -:  206:{ char ch1[2];  /* fixed array declaration MONI */
     9536:  207: ch1[0]=ch;
     9536:  208: ch1[1]='\0';
     9536:  209: if(is_eof_token(ch1)==TRUE)return(TRUE); /* is eof token? */
     9493:  210: if(str_com_id==1)          /* is string token */
     2113:  211:    { if(ch=='"' | ch=='\n')   /* for string until meet another " */
      147:  212:         return(TRUE);
        -:  213:      else
     1966:  214:         return(FALSE);
        -:  215:    }
        -:  216:
     7380:  217: if(str_com_id==2)    /* is comment token */
     1267:  218:   { if(ch=='\n')     /* for comment until meet end of line */
      117:  219:        return(TRUE);
        -:  220:      else
     1150:  221:        return(FALSE);
        -:  222:   }
        -:  223:
     6113:  224: if(is_spec_symbol(ch1)==TRUE) return(TRUE); /* is special_symbol? */
     5824:  225: if(ch ==' ' || ch=='\n' || ch==59) return(TRUE); 
        -:  226:                              /* others until meet blank or tab or 59 */
     5177:  227: return(FALSE);               /* other case,return FALSE */
     9536:  228:}
        -:  229:
        -:  230:/****************************************************/
        -:  231:/* NAME :	token_type                          */
        -:  232:/* INPUT:       a pointer to the token              */
        -:  233:/* OUTPUT:      an integer value                    */
        -:  234:/* DESCRIPTION: the integer value is corresponding  */
        -:  235:/*              to the different token type         */
        -:  236:/****************************************************/
     1967:  237:static int token_type(tok)
        -:  238:token tok;
        -:  239:{ 
     1967:  240: if(is_keyword(tok))return(keyword);
     1796:  241: if(is_spec_symbol(tok))return(spec_symbol);
     1312:  242: if(is_identifier(tok))return(identifier);
     1101:  243: if(is_num_constant(tok))return(num_constant);
      979:  244: if(is_str_constant(tok))return(str_constant);
      846:  245: if(is_char_constant(tok))return(char_constant);
      791:  246: if(is_comment(tok))return(comment);
      671:  247: if(is_eof_token(tok))return(end);
      431:  248: return(error);                    /* else look as error token */
     1967:  249:}
        -:  250:
        -:  251:/****************************************************/
        -:  252:/* NAME:	print_token                         */
        -:  253:/* INPUT:	a pointer to the token              */
        -:  254:/* OUTPUT:      a BOOLEAN value,print out the token */
        -:  255:/*              according the forms required        */
        -:  256:/****************************************************/
     1967:  257:int print_token(tok)
        -:  258:token tok;
        -:  259:{ int type;
     1967:  260:  type=token_type(tok);
     1967:  261: if(type==error)
      431:  262:   { fprintf(stdout, "error,\"%s\".\n",tok);
      431:  263:   } 
     1967:  264: if(type==keyword)
      171:  265:   {fprintf(stdout, "keyword,\"%s\".\n",tok);
      171:  266:   }
     1967:  267: if(type==spec_symbol)print_spec_symbol(tok);
     1967:  268: if(type==identifier)
      211:  269:   {fprintf(stdout, "identifier,\"%s\".\n",tok);
      211:  270:   }
     1967:  271: if(type==num_constant)
      122:  272:   {fprintf(stdout, "numeric,%s.\n",tok);
      122:  273:   }
     1967:  274: if(type==str_constant)
      133:  275:   {fprintf(stdout, "string,%s.\n",tok);
      133:  276:   }
     1967:  277: if(type==char_constant)
       55:  278:   {tok=tok+1;
       55:  279:    fprintf(stdout, "character,\"%s\".\n",tok);
       55:  280:   }
     1967:  281: if(type==end) 
      240:  282:   fprintf(stdout, "eof.\n");
     1967:  283:   }
        -:  284:
        -:  285:/* the code for tokens judgment function */
        -:  286:
        -:  287:/*************************************/
        -:  288:/* NAME:	is_eof_token         */
        -:  289:/* INPUT: 	a pointer to a token */
        -:  290:/* OUTPUT:      a BOOLEAN value      */
        -:  291:/*************************************/
    15384:  292:int is_eof_token(tok)
        -:  293:token tok;
        -:  294:{ 
    15384:  295:  if( *tok==EOF)
      806:  296:      return(TRUE);
        -:  297:  else
    14578:  298:      return(FALSE);
    15384:  299:}
        -:  300:
        -:  301:/*************************************/
        -:  302:/* NAME:	is_comment           */
        -:  303:/* INPUT: 	a pointer to a token */
        -:  304:/* OUTPUT:      a BOOLEAN value      */
        -:  305:/*************************************/
      791:  306:static int is_comment(ident)
        -:  307:token ident;
        -:  308:{
      791:  309:  if( (*ident) ==59 )   /* the char is 59   */
      120:  310:     return(TRUE);
        -:  311:  else
      671:  312:     return(FALSE);
      791:  313:}
        -:  314:
        -:  315:/*************************************/
        -:  316:/* NAME:	is_keyword           */
        -:  317:/* INPUT: 	a pointer to a token */
        -:  318:/* OUTPUT:      a BOOLEAN value      */
        -:  319:/*************************************/
     1967:  320:static int is_keyword(str)
        -:  321:    token  str;
        -:  322:{ 
     3787:  323: if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
     1889:  324:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
      171:  325:      return(TRUE);
        -:  326:  else 
     1796:  327:      return(FALSE);
     1967:  328:}
        -:  329:
        -:  330:/*************************************/
        -:  331:/* NAME:	is_char_constant     */
        -:  332:/* INPUT: 	a pointer to a token */
        -:  333:/* OUTPUT:      a BOOLEAN value      */
        -:  334:/*************************************/
      846:  335:static int is_char_constant(str)
        -:  336:    token str;
        -:  337:{
      846:  338:  if ((*str)=='#' && isalpha(*(str+1)))
       55:  339:     return(TRUE);
        -:  340:  else  
      791:  341:     return(FALSE);
      846:  342:}
        -:  343:
        -:  344:/*************************************/
        -:  345:/* NAME:	is_num_constant      */
        -:  346:/* INPUT: 	a pointer to a token */
        -:  347:/* OUTPUT:      a BOOLEAN value      */
        -:  348:/*************************************/
     1101:  349:static int is_num_constant(str)
        -:  350:    token  str;
        -:  351:{
     1101:  352:  int i=1;
        -:  353:  
     1101:  354:  if ( isdigit(*str)) 
        -:  355:    {
      286:  356:    while ( *(str+i) != '\0' )   /* until meet token end sign */
        -:  357:      {
      164:  358:       if(isdigit(*(str+i)))
      108:  359:         i++;
        -:  360:       else
       56:  361:         return(FALSE);
        -:  362:      }                         /* end WHILE */
      122:  363:    return(TRUE);
        -:  364:    }
        -:  365:  else
      923:  366:   return(FALSE);               /* other return FALSE */
     1101:  367:}
        -:  368:
        -:  369:/*************************************/
        -:  370:/* NAME:	is_str_constant      */
        -:  371:/* INPUT: 	a pointer to a token */
        -:  372:/* OUTPUT:      a BOOLEAN value      */
        -:  373:/*************************************/
      979:  374:static int is_str_constant(str)
        -:  375:    token str;
        -:  376:{
      979:  377:  int i=1;
        -:  378: 
      979:  379:  if ( *str =='"')
     2130:  380:     { while (*(str+i)!='\0')  /* until meet the token end sign */
     2113:  381:         { if(*(str+i)=='"')
      133:  382:             return(TRUE);        /* meet the second '"'           */
        -:  383:           else
     1980:  384:           i++;
        -:  385:         }               /* end WHILE */
       17:  386:     return(FALSE);
        -:  387:    }
        -:  388:  else
      829:  389:    return(FALSE);       /* other return FALSE */
      979:  390:}
        -:  391:/*************************************/
        -:  392:/* NAME:	is_identifier         */
        -:  393:/* INPUT: 	a pointer to a token */
        -:  394:/* OUTPUT:      a BOOLEAN value      */
        -:  395:/*************************************/
     1312:  396:static int is_identifier(str)
        -:  397:    token  str;
        -:  398:{
     1312:  399:  int i=1;
        -:  400:
     1312:  401:  if ( isalpha( *str) ) 
        -:  402:     {
     2005:  403:        while(  *(str+i) !='\0' )   /* unti meet the end token sign */
        -:  404:           { 
     1794:  405:            if(isalpha(*(str+i)) || isdigit(*(str+i)))   
     1609:  406:               i++;
        -:  407:            else
      185:  408:               return(FALSE);
        -:  409:           }      /* end WHILE */
      211:  410:     return(TRUE);
        -:  411:     }
        -:  412:  else
      916:  413:     return(FALSE);
     1312:  414:}
        -:  415:
        -:  416:/******************************************/
        -:  417:/* NAME:	unget_error               */
        -:  418:/* INPUT:       a pointer to token stream */
        -:  419:/* OUTPUT: 	print error message       */
        -:  420:/******************************************/
       43:  421:static unget_error(fp)
        -:  422:character_stream *fp;
        -:  423:{
       43:  424:fprintf(stdout,"It can not get charcter\n");
       43:  425:}
        -:  426:
        -:  427:/*************************************************/
        -:  428:/* NAME:        print_spec_symbol                */
        -:  429:/* INPUT:       a pointer to a spec_symbol token */
        -:  430:/* OUTPUT :     print out the spec_symbol token  */
        -:  431:/*              according to the form required   */
        -:  432:/*************************************************/
      484:  433:static void print_spec_symbol(str)
        -:  434:token str;
        -:  435:{
      484:  436:    if      (!strcmp(str,"("))
        -:  437:    {
       61:  438:             fprintf(stdout, "%s\n","lparen.");
       61:  439:             return;
        -:  440:    } 
      423:  441:    if (!strcmp(str,")"))
        -:  442:    {
       62:  443:             fprintf(stdout, "%s\n","rparen.");
       62:  444:             return;
        -:  445:    }
      361:  446:    if (!strcmp(str,"["))
        -:  447:    {
       72:  448:             fprintf(stdout, "%s\n","lsquare.");
       72:  449:             return;
        -:  450:    }
      289:  451:    if (!strcmp(str,"]"))
        -:  452:    {
       70:  453:             fprintf(stdout, "%s\n","rsquare.");
       70:  454:             return;
        -:  455:    }
      219:  456:    if (!strcmp(str,"'"))
        -:  457:    {
       64:  458:             fprintf(stdout, "%s\n","quote.");
       64:  459:             return;
        -:  460:    }
      155:  461:    if (!strcmp(str,"`"))
        -:  462:    {
       65:  463:             fprintf(stdout, "%s\n","bquote.");
       65:  464:             return;
        -:  465:    }
        -:  466:    
       90:  467:             fprintf(stdout, "%s\n","comma.");
      484:  468:}
        -:  469:
        -:  470:
        -:  471:/*************************************/
        -:  472:/* NAME:        is_spec_symbol       */
        -:  473:/* INPUT:       a pointer to a token */
        -:  474:/* OUTPUT:      a BOOLEAN value      */
        -:  475:/*************************************/
    10836:  476:static int is_spec_symbol(str)
        -:  477:    token str;
        -:  478:{
    10836:  479:    if (!strcmp(str,"("))
        -:  480:    {  
      200:  481:        return(TRUE);
        -:  482:    }
    10636:  483:    if (!strcmp(str,")"))
        -:  484:    {
      200:  485:        return(TRUE);
        -:  486:    }
    10436:  487:    if (!strcmp(str,"["))
        -:  488:    {
      224:  489:        return(TRUE);
        -:  490:    }
    10212:  491:    if (!strcmp(str,"]"))
        -:  492:    {
      228:  493:        return(TRUE);
        -:  494:    }
     9984:  495:    if (!strcmp(str,"'"))
        -:  496:    {
      208:  497:        return(TRUE);
        -:  498:    }
     9776:  499:    if (!strcmp(str,"`"))
        -:  500:    {
      190:  501:        return(TRUE);
        -:  502:    }
     9586:  503:    if (!strcmp(str,","))
        -:  504:    {
      296:  505:        return(TRUE);
        -:  506:    }
     9290:  507:    return(FALSE);     /* others return FALSE */
    10836:  508:}
        -:  509:
        -:  510:
