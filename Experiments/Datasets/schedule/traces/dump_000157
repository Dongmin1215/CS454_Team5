        -:    0:Source:schedule.c
        -:    0:Graph:schedule.gcno
        -:    0:Data:schedule.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*  -*- Last-Edit:  Wed May 7 10:12:52 1993 by Monica; -*- */
        -:    2:
        -:    3:
        -:    4:#include <stdio.h>
        -:    5:
        -:    6:/* A job descriptor. */
        -:    7:
        -:    8:#define NULL 0
        -:    9:
        -:   10:
        -:   11:#define NEW_JOB        1
        -:   12:#define UPGRADE_PRIO   2 
        -:   13:#define BLOCK          3
        -:   14:#define UNBLOCK        4  
        -:   15:#define QUANTUM_EXPIRE 5
        -:   16:#define FINISH         6
        -:   17:#define FLUSH          7
        -:   18:
        -:   19:#define MAXPRIO 3
        -:   20:
        -:   21:typedef struct _job {
        -:   22:    struct  _job *next, *prev; /* Next and Previous in job list. */
        -:   23:    int          val  ;         /* Id-value of program. */
        -:   24:    short        priority;     /* Its priority. */
        -:   25:} Ele, *Ele_Ptr;
        -:   26:
        -:   27:typedef struct list		/* doubly linked list */
        -:   28:{
        -:   29:  Ele *first;
        -:   30:  Ele *last;
        -:   31:  int    mem_count;		/* member count */
        -:   32:} List;
        -:   33:
        -:   34:/*-----------------------------------------------------------------------------
        -:   35:  new_ele
        -:   36:     alloates a new element with value as num.
        -:   37:-----------------------------------------------------------------------------*/
       19:   38:Ele* new_ele(new_num) 
        -:   39:int new_num;
        -:   40:{	
        -:   41:    Ele *ele;
        -:   42:
       19:   43:    ele =(Ele *)malloc(sizeof(Ele));
       19:   44:    ele->next = NULL;
       19:   45:    ele->prev = NULL;
       19:   46:    ele->val  = new_num;
       19:   47:    return ele;
        -:   48:}
        -:   49:
        -:   50:/*-----------------------------------------------------------------------------
        -:   51:  new_list
        -:   52:        allocates, initializes and returns a new list.
        -:   53:        Note that if the argument compare() is provided, this list can be
        -:   54:            made into an ordered list. see insert_ele().
        -:   55:-----------------------------------------------------------------------------*/
        4:   56:List *new_list()
        -:   57:{
        -:   58:    List *list;
        -:   59:
        4:   60:    list = (List *)malloc(sizeof(List));
        -:   61:    
        4:   62:    list->first = NULL;
        4:   63:    list->last  = NULL;
        4:   64:    list->mem_count = 0;
        4:   65:    return (list);
        -:   66:}
        -:   67:
        -:   68:/*-----------------------------------------------------------------------------
        -:   69:  append_ele
        -:   70:        appends the new_ele to the list. If list is null, a new
        -:   71:	list is created. The modified list is returned.
        -:   72:-----------------------------------------------------------------------------*/
       32:   73:List *append_ele(a_list, a_ele)
        -:   74:List *a_list;
        -:   75:Ele  *a_ele;
        -:   76:{
       32:   77:  if (!a_list)
        1:   78:      a_list = new_list();	/* make list without compare function */
        -:   79:
       32:   80:  a_ele->prev = a_list->last;	/* insert at the tail */
       32:   81:  if (a_list->last)
       21:   82:    a_list->last->next = a_ele;
        -:   83:  else
       11:   84:    a_list->first = a_ele;
       32:   85:  a_list->last = a_ele;
       32:   86:  a_ele->next = NULL;
       32:   87:  a_list->mem_count++;
       32:   88:  return (a_list);
        -:   89:}
        -:   90:
        -:   91:/*-----------------------------------------------------------------------------
        -:   92:  find_nth
        -:   93:        fetches the nth element of the list (count starts at 1)
        -:   94:-----------------------------------------------------------------------------*/
        7:   95:Ele *find_nth(f_list, n)
        -:   96:List *f_list;
        -:   97:int   n;
        -:   98:{
        -:   99:    Ele *f_ele;
        -:  100:    int i;
        -:  101:
        7:  102:    if (!f_list)
    #####:  103:	return NULL;
        7:  104:    f_ele = f_list->first;
       12:  105:    for (i=1; f_ele && (i<n); i++)
        5:  106:	f_ele = f_ele->next;
        7:  107:    return f_ele;
        7:  108:}
        -:  109:
        -:  110:/*-----------------------------------------------------------------------------
        -:  111:  del_ele
        -:  112:        deletes the old_ele from the list.
        -:  113:        Note: even if list becomes empty after deletion, the list
        -:  114:	      node is not deallocated.
        -:  115:-----------------------------------------------------------------------------*/
       30:  116:List *del_ele(d_list, d_ele)
        -:  117:List *d_list;
        -:  118:Ele  *d_ele;
        -:  119:{
       30:  120:    if (!d_list || !d_ele)
    #####:  121:	return (NULL);
        -:  122:    
       30:  123:    if (d_ele->next)
       20:  124:	d_ele->next->prev = d_ele->prev;
        -:  125:    else
       10:  126:	d_list->last = d_ele->prev;
       30:  127:    if (d_ele->prev)
        3:  128:	d_ele->prev->next = d_ele->next;
        -:  129:    else
       27:  130:	d_list->first = d_ele->next;
        -:  131:    /* KEEP d_ele's data & pointers intact!! */
       30:  132:    d_list->mem_count--;
       30:  133:    return (d_list);
       30:  134:}
        -:  135:
        -:  136:/*-----------------------------------------------------------------------------
        -:  137:   free_ele
        -:  138:       deallocate the ptr. Caution: The ptr should point to an object
        -:  139:       allocated in a single call to malloc.
        -:  140:-----------------------------------------------------------------------------*/
       17:  141:void free_ele(ptr)
        -:  142:Ele *ptr;
        -:  143:{
       17:  144:    free(ptr);
       17:  145:}
        -:  146:
        -:  147:int alloc_proc_num;
        -:  148:int num_processes;
        -:  149:Ele* cur_proc;
        -:  150:List *prio_queue[MAXPRIO+1]; 	/* 0th element unused */
        -:  151:List *block_queue;
        -:  152:
       45:  153:void schedule()
        -:  154:{
        -:  155:    int i;
        -:  156:    
       45:  157:    cur_proc = NULL;
      122:  158:    for (i=MAXPRIO; i > 0; i--)
        -:  159:    {
      100:  160:  if (prio_queue[i]->mem_count > 0)
        -:  161:  {
       23:  162:      cur_proc = prio_queue[i]->first;
       23:  163:      prio_queue[i] = del_ele(prio_queue[i], cur_proc);
       23:  164:      return;
        -:  165:  }
       77:  166:    }
       45:  167:}
        -:  168:
        -:  169:void
       30:  170:finish_process()
        -:  171:{
       30:  172:    schedule();
       30:  173:    if (cur_proc)
        -:  174:    {
       17:  175:	fprintf(stdout, "%d ", cur_proc->val);
       17:  176:	free_ele(cur_proc);
       17:  177:	num_processes--;
       17:  178:    }
       30:  179:}
        -:  180:
        -:  181:void
        4:  182:finish_all_processes()
        -:  183:{
        -:  184:    int i;
        -:  185:    int total;
        4:  186:    total = num_processes;
       28:  187:    for (i=0; i<total; i++)
       24:  188:	finish_process();
        4:  189:}
        -:  190:
        -:  191:void
        4:  192:upgrade_process_prio(prio, ratio)
        -:  193:int prio;
        -:  194:float ratio;
        -:  195:{
        -:  196:    int count;
        -:  197:    int n;
        -:  198:    Ele *proc;
        -:  199:    List *src_queue, *dest_queue;
        -:  200:    
        4:  201:    if (prio >= MAXPRIO)
    #####:  202:	return;
        4:  203:    src_queue = prio_queue[prio];
        4:  204:    dest_queue = prio_queue[prio+1];
        4:  205:    count = src_queue->mem_count;
        -:  206:
        4:  207:    if (count > 0)
        -:  208:    {
        2:  209:	n = (int) (count*ratio + 1);
        2:  210:	proc = find_nth(src_queue, n);
        2:  211:	if (proc) {
        2:  212:	    src_queue = del_ele(src_queue, proc);
        -:  213:	    /* append to appropriate prio queue */
        2:  214:	    proc->priority = prio;
        2:  215:	    dest_queue = append_ele(dest_queue, proc);
        2:  216:	}
        2:  217:    }
        4:  218:}
        -:  219:
        -:  220:void
        5:  221:unblock_process(ratio)
        -:  222:float ratio;
        -:  223:{
        -:  224:    int count;
        -:  225:    int n;
        -:  226:    Ele *proc;
        -:  227:    int prio;
        5:  228:    if (block_queue)
        -:  229:    {
        5:  230:	count = block_queue->mem_count;
        5:  231:	n = (int) (count*ratio + 1);
        5:  232:	proc = find_nth(block_queue, n);
        5:  233:	if (proc) {
        5:  234:	    block_queue = del_ele(block_queue, proc);
        -:  235:	    /* append to appropriate prio queue */
        5:  236:	    prio = proc->priority;
        5:  237:	    prio_queue[prio] = append_ele(prio_queue[prio], proc);
        5:  238:	}
        5:  239:    }
        5:  240:}
        -:  241:
        5:  242:void quantum_expire()
        -:  243:{
        -:  244:    int prio;
        5:  245:    schedule();
        5:  246:    if (cur_proc)
        -:  247:    {
        1:  248:	prio = cur_proc->priority;
        1:  249:	prio_queue[prio] = append_ele(prio_queue[prio], cur_proc);
        1:  250:    }	
        5:  251:}
        -:  252:	
        -:  253:void
       10:  254:block_process()
        -:  255:{
       10:  256:    schedule();
       10:  257:    if (cur_proc)
        -:  258:    {
        5:  259:	block_queue = append_ele(block_queue, cur_proc);
        5:  260:    }
       10:  261:}
        -:  262:
       19:  263:Ele * new_process(prio)
        -:  264:int prio;
        -:  265:{
        -:  266:    Ele *proc;
       19:  267:    proc = new_ele(alloc_proc_num++);
       19:  268:    proc->priority = prio;
       19:  269:    num_processes++;
       19:  270:    return proc;
        -:  271:}
        -:  272:
        3:  273:void add_process(prio)
        -:  274:int prio;
        -:  275:{
        -:  276:    Ele *proc;
        3:  277:    proc = new_process(prio);
        3:  278:    prio_queue[prio] = append_ele(prio_queue[prio], proc);
        3:  279:}
        -:  280:
        3:  281:void init_prio_queue(prio, num_proc)
        -:  282:int prio;
        -:  283:int num_proc;
        -:  284:{
        -:  285:    List *queue;
        -:  286:    Ele  *proc;
        -:  287:    int i;
        -:  288:    
        3:  289:    queue = new_list();
       19:  290:    for (i=0; i<num_proc; i++)
        -:  291:    {
       16:  292:	proc = new_process(prio);
       16:  293:	queue = append_ele(queue, proc);
       16:  294:    }
        3:  295:    prio_queue[prio] = queue;
        3:  296:}
        -:  297:
        1:  298:void initialize()
        -:  299:{
        1:  300:    alloc_proc_num = 0;
        1:  301:    num_processes = 0;
        1:  302:}
        -:  303:				
        -:  304:/* test driver */
        1:  305:void main(argc, argv)
        -:  306:int argc;
        -:  307:char *argv[];
        -:  308:{
        -:  309:    int command;
        -:  310:    int prio;
        -:  311:    float ratio;
        -:  312:    int status;
        -:  313:
        1:  314:    if (argc < (MAXPRIO+1))
        -:  315:    {
    #####:  316:	fprintf(stdout, "incorrect usage\n");
    #####:  317:	return;
        -:  318:    }
        -:  319:    
        1:  320:    initialize();
        4:  321:    for (prio=MAXPRIO; prio >= 1; prio--)
        -:  322:    {
        3:  323:	init_prio_queue(prio, atoi(argv[prio]));
        3:  324:    }
       76:  325:    for (status = fscanf(stdin, "%d", &command);
       38:  326:	 ((status!=EOF) && status);
       37:  327:	 status = fscanf(stdin, "%d", &command))
        -:  328:    {
       37:  329:	switch(command)
        -:  330:	{
        -:  331:	case FINISH:
        6:  332:	    finish_process();
        6:  333:	    break;
        -:  334:	case BLOCK:
       10:  335:	    block_process();
       10:  336:	    break;
        -:  337:	case QUANTUM_EXPIRE:
        5:  338:	    quantum_expire();
        5:  339:	    break;
        -:  340:	case UNBLOCK:
        5:  341:	    fscanf(stdin, "%f", &ratio);
        5:  342:	    unblock_process(ratio);
        5:  343:	    break;
        -:  344:	case UPGRADE_PRIO:
        4:  345:	    fscanf(stdin, "%d", &prio);
        4:  346:	    fscanf(stdin, "%f", &ratio);
        4:  347:	    if (prio > MAXPRIO || prio <= 0) { 
    #####:  348:		fprintf(stdout, "** invalid priority\n");
    #####:  349:		return;
        -:  350:	    }
        -:  351:	    else 
        4:  352:		upgrade_process_prio(prio, ratio);
        4:  353:	    break;
        -:  354:	case NEW_JOB:
        3:  355:	    fscanf(stdin, "%d", &prio);
        3:  356:	    if (prio > MAXPRIO || prio <= 0) {
    #####:  357:		fprintf(stdout, "** invalid priority\n");
    #####:  358:		return;
        -:  359:	    }
        -:  360:	    else 
        3:  361:		add_process(prio);
        3:  362:	    break;
        -:  363:	case FLUSH:
        4:  364:	    finish_all_processes();
        4:  365:	    break;
        -:  366:	}
       37:  367:    }
        1:  368:}
        -:  369:
        -:  370:/* A simple input spec:
        -:  371:  
        -:  372:  a.out n3 n2 n1
        -:  373:
        -:  374:  where n3, n2, n1 are non-negative integers indicating the number of
        -:  375:  initial processes at priority 3, 2, and 1, respectively.
        -:  376:
        -:  377:  The input file is a list of commands of the following kinds:
        -:  378:   (For simplicity, comamnd names are integers (NOT strings)
        -:  379:    
        -:  380:  FINISH            ;; this exits the current process (printing its number)
        -:  381:  NEW_JOB priority  ;; this adds a new process at specified priority
        -:  382:  BLOCK             ;; this adds the current process to the blocked queue
        -:  383:  QUANTUM_EXPIRE    ;; this puts the current process at the end
        -:  384:                    ;;      of its prioqueue
        -:  385:  UNBLOCK ratio     ;; this unblocks a process from the blocked queue
        -:  386:                    ;;     and ratio is used to determine which one
        -:  387:
        -:  388:  UPGRADE_PRIO small-priority ratio ;; this promotes a process from
        -:  389:                    ;; the small-priority queue to the next higher priority
        -:  390:                    ;;     and ratio is used to determine which process
        -:  391: 
        -:  392:  FLUSH	            ;; causes all the processes from the prio queues to
        -:  393:                    ;;    exit the system in their priority order
        -:  394:
        -:  395:where
        -:  396: NEW_JOB        1
        -:  397: UPGRADE_PRIO   2 
        -:  398: BLOCK          3
        -:  399: UNBLOCK        4  
        -:  400: QUANTUM_EXPIRE 5
        -:  401: FINISH         6
        -:  402: FLUSH          7
        -:  403:and priority is in        1..3
        -:  404:and small-priority is in  1..2
        -:  405:and ratio is in           0.0..1.0
        -:  406:
        -:  407: The output is a list of numbers indicating the order in which
        -:  408: processes exit from the system.   
        -:  409:
        -:  410:*/
        -:  411:
        -:  412:
